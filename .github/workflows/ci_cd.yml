name: CI/CD
on:
  push:
    branches:
      - main
      - develop

jobs:
  continuous_integration:
    if: ${{ !contains(github.event.head_commit.message, 'initial commit') }}
    runs-on: ubuntu-latest
    steps:
      - name: Set Environments
        run: |
          echo PROJECT_NAME=$(echo "${{ github.repository }}" | sed "s|${{ github.repository_owner }}\/||g" | sed "s|-spring||g") >> $GITHUB_ENV
          echo PROJECT_ENV=$(test ${GITHUB_REF##*/} = main && echo prod || echo dev) >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

      # JAVA setting for build
      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Spring .yml file copy for each module
      - name: Copy Spring .yml files
        env:
          CREATE_SECRET: ${{secrets.APPLICATION_DEV_YML}}
        run: |
          echo $CREATE_SECRET | base64 --decode > admin/src/main/resources/application-dev.yml
          echo $CREATE_SECRET | base64 --decode > api/src/main/resources/application-dev.yml
          echo $CREATE_SECRET | base64 --decode > batch/src/main/resources/application-dev.yml

      # application build for all modules
      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # set docker buildx
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        # uses: docker/setup-buildx-action@v3 ?? action@v3 와 v1과 차이점은??


      # Build & Push images for each module
      - name: Build & Push Admin Image
        uses: docker/build-push-action@v4
        with:
          context: ./admin
          build-args: |
            CI=true
            APP_ENV=${{ env.PROJECT_ENV }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          push: true
          tags: >-
            ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-admin:${{ env.PROJECT_ENV }},
            ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-admin:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build & Push API Image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          build-args: |
            CI=true
            APP_ENV=${{ env.PROJECT_ENV }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          push: true
          tags: >-
            ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-api:${{ env.PROJECT_ENV }},
            ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build & Push Batch Image
        uses: docker/build-push-action@v4
        with:
          context: ./batch
          build-args: |
            CI=true
            APP_ENV=${{ env.PROJECT_ENV }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          push: true
          tags: >-
            ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-batch:${{ env.PROJECT_ENV }},
            ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-batch:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  continuous_deployment:
    runs-on: ubuntu-latest
    needs: [ continuous_integration ]
    steps:
      - name: Set Environments
        run: |
          echo PROJECT_NAME=$(echo "${{ github.repository }}" | sed "s|${{ github.repository_owner }}\/||g" | sed "s|-spring||g") >> $GITHUB_ENV
          echo PROJECT_ENV=$(test ${GITHUB_REF##*/} = main && echo prod || echo dev) >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Deploy each module
      - name: Download Admin TaskDefinition
        id: tf-admin-download
        continue-on-error: true
        run: aws ecs describe-task-definition --task-definition ${{ env.PROJECT_NAME }}-${{ env.PROJECT_ENV }}-admin-family --query taskDefinition > admin.tf.json

      - name: Render Admin TaskDefinition
        id: tf-admin-render
        if: steps.tf-admin-download.outcome == 'success'
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: admin.tf.json
          container-name: admin
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-admin:${{ github.sha }}

      - name: Deploy Admin Service
        if: steps.tf-admin-download.outcome == 'success'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.tf-admin-render.outputs.task-definition }}
          cluster: ${{ env.PROJECT_NAME }}-${{ env.PROJECT_ENV }}-ecs-cluster
          service: admin

      - name: Download API TaskDefinition
        id: tf-api-download
        continue-on-error: true
        run: aws ecs describe-task-definition --task-definition ${{ env.PROJECT_NAME }}-${{ env.PROJECT_ENV }}-api-family --query taskDefinition > api.tf.json

      - name: Render API TaskDefinition
        id: tf-api-render
        if: steps.tf-api-download.outcome == 'success'
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: api.tf.json
          container-name: api
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-api:${{ github.sha }}

      - name: Deploy API Service
        if: steps.tf-api-download.outcome == 'success'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.tf-api-render.outputs.task-definition }}
          cluster: ${{ env.PROJECT_NAME }}-${{ env.PROJECT_ENV }}-ecs-cluster
          service: api

      - name: Download Batch TaskDefinition
        id: tf-batch-download
        continue-on-error: true
        run: aws ecs describe-task-definition --task-definition ${{ env.PROJECT_NAME }}-${{ env.PROJECT_ENV }}-batch-family --query taskDefinition > batch.tf.json

      - name: Render Batch TaskDefinition
        id: tf-batch-render
        if: steps.tf-batch-download.outcome == 'success'
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: batch.tf.json
          container-name: batch
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-batch:${{ github.sha }}

      - name: Deploy Batch Service
        if: steps.tf-batch-download.outcome == 'success'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.tf-batch-render.outputs.task-definition }}
          cluster: ${{ env.PROJECT_NAME }}-${{ env.PROJECT_ENV }}-ecs-cluster
          service: batch

      #      - name: Download Websocket TaskDefinition
      #        id: tf-websocket-download
      #        continue-on-error: true
      #        run: aws ecs describe-task-definition --task-definition ${{ env.PROJECT_NAME }}-${{ env.PROJECT_ENV }}-websocket-family --query taskDefinition > websocket.tf.json
      #
      #      - name: Render Websocket TaskDefinition
      #        id: tf-websocket-render
      #        if: steps.tf-websocket-download.outcome == 'success'
      #        uses: aws-actions/amazon-ecs-render-task-definition@v1
      #        with:
      #          task-definition: websocket.tf.json
      #          container-name: websocket
      #          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-backend:${{ github.sha }}
      #
      #      - name: Deploy Websocket Service
      #        if: steps.tf-websocket-download.outcome == 'success'
      #        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #        with:
      #          task-definition: ${{ steps.tf-websocket-render.outputs.task-definition }}
      #          cluster: ${{ env.PROJECT_NAME }}-${{ env.PROJECT_ENV }}-ecs-cluster
      #          service: websocket
